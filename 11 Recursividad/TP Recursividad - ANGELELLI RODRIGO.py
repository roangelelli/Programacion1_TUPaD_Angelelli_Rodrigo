#Ejercicio 1: Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
# funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
# entre 1 y el n√∫mero que indique el usuario

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Solicitar n√∫mero al usuario
limite = int(input("Ingrese un n√∫mero entero: "))

# Mostrar factoriales desde 1 hasta el n√∫mero ingresado
for i in range(1, limite + 1):
    print(f"Factorial de {i} es {factorial(i):,}")

#Ejercicio 2: Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
#Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Solicitar al usuario hasta qu√© posici√≥n desea ver la serie
posicion = int(input("Ingrese la posici√≥n hasta la que desea ver la serie de Fibonacci: "))

# Mostrar la serie completa
print("Serie de Fibonacci:")
for i in range(posicion + 1):
    print(f"F({i}) = {fibonacci(i)}")

#Ejercicio 3: Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
#utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ (ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Prueba general
base = int(input("Ingrese la base: "))
exponente = int(input("Ingrese el exponente: "))

resultado = potencia(base, exponente)
print(f"{base}^{exponente} = {resultado}")


#Ejercicio 4: Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
# y devuelva su representaci√≥n en binario como una cadena de texto.
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Solicitar n√∫mero al usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))

if numero == 0:
    print("0")
else:
    binario = decimal_a_binario(numero)
    print(f"El n√∫mero {numero} en binario es: {binario}")

#Ejercicio 5: Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
# cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    elif palabra[0] == palabra[-1]:
        return es_palindromo(palabra[1:-1])
    else:
        return False

palabra_ingresada = input("Ingresa una palabra (sin espacios ni tildes): ").lower()

if es_palindromo(palabra_ingresada):
    print(f"'{palabra_ingresada}' es un pal√≠ndromo.")
else:
    print(f"'{palabra_ingresada}' no es un pal√≠ndromo.")


#Ejercicio 6: Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero
# entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n):
    if n < 10:
        return n
    else:
        return (n % 10) + suma_digitos(n // 10)

# Solicitar n√∫mero al usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))

if numero < 0:
    print("Debe ingresar un n√∫mero positivo.")
else:
    resultado = suma_digitos(numero)
    print(f"La suma de los d√≠gitos de {numero} es: {resultado}")

#Ejercicio 7: Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
# nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.

def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n - 1)

# Solicitar n√∫mero al usuario
nivel = int(input("Ingrese la cantidad de bloques en el nivel m√°s bajo: "))

if nivel < 1:
    print("Debe ingresar un n√∫mero entero positivo mayor o igual a 1.")
else:
    total = contar_bloques(nivel)
    print(f"Se necesitan {total} bloques para construir la pir√°mide.")

#Ejercicio 8: Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
# n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
# aparece ese d√≠gito dentro del n√∫mero.

def contar_digito(numero, digito):
    if numero == 0:
        return 0
    else:
        ultimo = numero % 10
        if ultimo == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

# Entrada del usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese el d√≠gito a contar (0 a 9): "))

if numero < 0 or digito < 0 or digito > 9:
    print("Entrada inv√°lida. Aseg√∫rese de ingresar un n√∫mero positivo y un d√≠gito entre 0 y 9.")
else:
    cantidad = contar_digito(numero, digito)
    print(f"El d√≠gito {digito} aparece {cantidad} veces en el n√∫mero {numero}.")
